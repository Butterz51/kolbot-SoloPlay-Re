/* eslint-disable no-fallthrough */
/**
*  @filename    D2BotSoloPlay.dbj
*  @author      theBGuy
*  @desc        Entry script for SoloPlay leveling system
*
*
*  @typedef {import("./sdk/globals")}
*/

// No touchy!
include("critical.js"); // required

// D2BotSoloPlay specific settings - for global settings see libs/starter/StarterConfig.js
Starter.Config.InvalidPasswordDelay = 10; // Minutes to wait after getting Invalid Password message
Starter.Config.GameDoesNotExistTimeout = 600; // Seconds to wait before cancelling the 'Game does not exist.' screen
Starter.Config.DelayBeforeLogin = rand(5, 25); // Seconds to wait before logging in
Starter.Config.VersionErrorDelay = rand(5, 30); // Seconds to wait after 'unable to identify version' message

// Global Account Settings.
Starter.Config.GlobalAccount = ""; // Set value for a global account. (MAX Characters 12 plus AccountSuffixLength) 
Starter.Config.AccountSuffixLength = 3; // Set Global Account value for random numbers at the end of the name. (Minimum suffix 3)
Starter.Config.GlobalAccountPassword = ""; // Set value for a global password for account generation.

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

/**
 * @todo
 *   - re-structure to use datafile for login info instead of writing to d2bot#
 *   - need to hanlde single player and online logging in
 *   - need to handle someone using a premade account
 */

// the only things we really need from these are their oog checks
includeSystemLibs();

// what do I need from here?
const { getAreaName, Time } = require("./libs/core/Util");
include("core/experience.js");
// solo specific
include("SoloPlay/Tools/Developer.js");
include("SoloPlay/Tools/CharData.js");
include("SoloPlay/Tools/Tracker.js");
include("SoloPlay/Tools/OOGOverrides.js");

// is this needed? soloplay doesn't run in default.dbj anymore
include("SoloPlay/Functions/ConfigOverrides.js");

if (typeof Starter.AdvancedConfig[me.profile] === "object") {
	Object.assign(Starter.Config, Starter.AdvancedConfig[me.profile]);
} else {
	// no need to carry around the reference
	delete Starter.AdvancedConfig;
}

let joinInfo;
let gameTracker;

// initialize data files
if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
	delay(Math.floor(rand(1, 20)));
}

if (!FileTools.exists(CharData.filePath) && CharData.create()) {
	delay(Math.floor(rand(1, 20)));
}

if (!FileTools.exists(CharData.filePath) && CharData.loginData.create()) {
	delay(Math.floor(rand(1, 20)));
}

Developer.logPerformance && Tracker.initialize();

function timer (tick) {
	const currInGame = (getTickCount() - tick);
	let timeStr = " (Time: " + Time.format(currInGame) + ") ";
	
	if (Developer.displayClockInConsole && Developer.logPerformance) {
		try {
			gameTracker === undefined && (gameTracker = Tracker.readObj(Tracker.GTPath));
			let [tTime, tInGame, tDays] = [(gameTracker.Total + currInGame), (gameTracker.InGame + currInGame), (gameTracker.Total + currInGame)];
			let [totalTime, totalInGame, totalDays] = [Tracker.formatTime(tTime), Tracker.formatTime(tInGame), Tracker.totalDays(tDays)];
			timeStr += ("(Days: " + totalDays + ") (Total: " + totalTime + ") (IG: " + totalInGame + ") (OOG: " + Tracker.formatTime(gameTracker.OOG) + ")");
		} catch (e) {
			console.log(e);
		}
	}
	return timeStr;
}

function main () {
	debugLog(me.profile);
	addEventListener("copydata", Starter.receiveCopyData);
	addEventListener("scriptmsg", Starter.scriptMsgEvent);

	let oogTick = getTickCount();

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);

	while (!D2Bot.init()) {
		delay(250);
	}
	load("threads/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Profile().type === sdk.game.profiletype.TcpIpJoin) {
		D2Bot.printToConsole("TcpJoin is unsupported.");
		D2Bot.stop();
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		Starter.BNET && D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		console.log("Getting Profile");
		delay(500);
	}

	if (Starter.profileInfo.charName === "") {
		console.log("Generating Character Name");
		Starter.profileInfo.charName = require("./libs/SoloPlay/Tools/NameGen")();
		delay(50);
	}

	let resPenalty, areaName, diffName;
	const xp = () => me.getStat(sdk.stats.Experience) > 0 ? Experience.progress() : 0;
	const tGold = () => me.getStat(sdk.stats.Gold) + me.getStat(sdk.stats.GoldBank);
	const fireRes = (resPenalty) => Math.min(75 + me.getStat(sdk.stats.MaxFireResist), me.getStat(sdk.stats.FireResist) - resPenalty);
	const coldRes = (resPenalty) => Math.min(75 + me.getStat(sdk.stats.MaxColdResist), me.getStat(sdk.stats.ColdResist) - resPenalty);
	const lightRes = (resPenalty) => Math.min(75 + me.getStat(sdk.stats.MaxLightResist), me.getStat(sdk.stats.LightResist) - resPenalty);
	const poisRes = (resPenalty) => Math.min(75 + me.getStat(sdk.stats.MaxPoisonResist), me.getStat(sdk.stats.PoisonResist) - resPenalty);

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				Starter.isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					resPenalty = me.gametype === 0 ? [0, 20, 50][me.diff] : [0, 40, 100][me.diff];
					diffName = ["Norm", "Night", "Hell"][me.diff];
					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
					Developer.logPerformance && Tracker.update((getTickCount() - oogTick));
					Developer.displayClockInConsole && (gameTracker = Tracker.readObj(Tracker.GTPath));
					oogTick = 0;
				}

				if (me.ingame && me.gameReady) {
					let statusString = "";

					try {
						let [exp, myGold, fr, cr, lr, pr] = [xp(), tGold(), fireRes(resPenalty), coldRes(resPenalty), lightRes(resPenalty), poisRes(resPenalty)];
						areaName = !!me.area ? getAreaName(me.area) : "";
						statusString = me.name + " | Lvl: " + me.charlvl + " (" + exp + "%) (Diff: " + diffName + ") (A: " + areaName + ") (G: " + myGold + ") (F: " + fr + "/C: " + cr + "/L: " + lr + "/P: " + pr + ")";
					} catch (e) {
						console.error(e);
					}

					D2Bot.updateStatus(statusString + timer(Starter.gameStart));
				}
			}

			delay(1000);
		}

		// was in game so start recording oog time
		Starter.inGame && oogTick === 0 && (oogTick = getTickCount());
		Starter.isUp = "no";

		try {
			let loc = getLocation();
			(locations[loc] !== undefined) && locations[loc](loc);
		} catch (e) {
			console.error(e, "LOCATION: " + getLocation());
		}
		delay(1000);
	}
}
