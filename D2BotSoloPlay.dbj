/**
*  @filename    D2BotSoloPlay.dbj
*  @author      theBGuy
*  @desc        Entry script for SoloPlay leveling system
*
*
*  @typedef {import("./sdk/globals")}
*/

// No touchy!
include("critical.js"); // required

// D2BotSoloPlay specific settings - for global settings see libs/starter/StarterConfig.js
Starter.Config.InvalidPasswordDelay = 10; // Minutes to wait after getting Invalid Password message
Starter.Config.GameDoesNotExistTimeout = 600; // Seconds to wait before cancelling the 'Game does not exist.' screen
Starter.Config.DelayBeforeLogin = 25; // rand(5, 25); // Seconds to wait before logging in
Starter.Config.VersionErrorDelay = rand(5, 30); // Seconds to wait after 'unable to identify version' message

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds
// Profile().type === sdk.game.profiletype.SinglePlayer && (Starter.Config.CrashDelay = 2);

/**
 * @todo
 *   - re-structure to use datafile for login info instead of writing to d2bot#
 *   - need to hanlde single player and online logging in
 *   - need to handle someone using a premade account
 */

// the only things we really need from these are their oog checks
includeSystemLibs();

// solo specific
include("SoloPlay/Tools/Developer.js");
include("SoloPlay/Tools/CharData.js");
include("SoloPlay/Tools/Tracker.js");
include("SoloPlay/Tools/OOGOverrides.js");

// is this needed? soloplay doesn't run in default.dbj anymore
include("SoloPlay/Functions/ConfigOverrides.js");

if (typeof Starter.AdvancedConfig[me.profile] === "object") {
  Object.assign(Starter.Config, Starter.AdvancedConfig[me.profile]);
}
delete Starter.AdvancedConfig;

// initialize data files
if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
  Starter.firstRun = true;
}

!FileTools.exists(CharData.filePath) && CharData.create();
!FileTools.exists(CharData.login.filePath) && CharData.login.create();
Developer.logPerformance && Tracker.initialize();

/**
 * Calculate minGameTime based on individual profiles and their associated IP count
 * Invokes the calculateAndSetMinGameTime() function from Developer.js
 * Checks whether the maximum allowed IPs is below 8, and then determines the time accordingly
 * Utilizes data from either the array values or static values in Developer.js
 */
const minGameTime = calculateAndSetMinGameTime();
let profileArray = Developer.ProfilesPerIP.ProfilesArray.find(profile => profile.ProfileName.toUpperCase() === me.profile.toUpperCase());
let numProfiles = profileArray ? profileArray.IP : Developer.ProfilesPerIP.StaticProfiles;

function main () {
  debugLog(me.profile);
  addEventListener("copydata", Starter.receiveCopyData);
  addEventListener("scriptmsg", Starter.scriptMsgEvent);

  let oogTick = getTickCount();

  while (!Starter.handle) {
    delay(3);
  }

  DataFile.updateStats("handle", Starter.handle);
  D2Bot.handle = Starter.handle;
  delay(500);

  load("threads/heartbeat.js");

  if (Profile().type === sdk.game.profiletype.TcpIpJoin) {
    D2Bot.printToConsole("TcpJoin is unsupported.");
    D2Bot.stop();
  }

  Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

  while (!Object.keys(Starter.gameInfo).length) {
    delay(rand(200, 1500));
    D2Bot.requestGameInfo();
    delay(500);
  }

  if (Starter.gameInfo.error) {
    validateProfileIP(numProfiles);
    ControlAction.timeoutDelay("Crash Delay  |  Waiting:", minGameTime * 1e3);
    Starter.BNET && D2Bot.updateRuns();
  }

  DataFile.updateStats("debugInfo", JSON.stringify({ currScript: "none", area: "out of game" }));

  while (!Object.keys(Starter.profileInfo).length) {
    delay(rand(200, 1500));
    D2Bot.getProfile();
    delay(500);
  }

  while (true) {
    // returns true before actually in game so we can't only use this check
    while (me.ingame) {
      // returns false when switching acts so we can't use while
      if (me.gameReady) {
        Starter.isUp = "yes";

        if (!Starter.inGame) {
          Starter.gameStart = getTickCount();
          Starter.lastGameStatus = "ingame";
          Starter.inGame = true;
          Starter.FTJCount = 0;
          console.log(sdk.colors.Orange + "FTJ System" + sdk.colors.White + "  ::  " + sdk.colors.NeonGreen + "Consecutive FTJ Count Reset To: " + sdk.colors.White + "0");
          DataFile.updateStats("runs", Starter.gameCount);
          DataFile.updateStats("ingameTick");
          Developer.logPerformance && Tracker.update((getTickCount() - oogTick));
          oogTick = 0;
          D2Bot.updateStatus("In-Game :: Initializing threads...");
        } else {
          // Tracker
          if (Developer.logPerformance) {
            if (getTickCount() - Tracker.tick > Time.minutes(3)) {
              Tracker.tick = getTickCount();

              try {
                Tracker.update();
              } catch (e) {
                console.error(e);
              }
            }
          }
        }
      }

      delay(1000);
    }

    // was in game so start recording oog time
    Starter.inGame && oogTick === 0 && (oogTick = getTickCount());
    Starter.isUp = "no";

    LocationAction.run();
    delay(1000);
  }
}
